module ClkDivider(
    input clk,
    input rst,
    input [31:0] count_to,
    output reg clk_div
    );
     
reg [31:0] count;

initial begin
    count[31:0] = 32'b0;
    clk_div = 1'b0;
end

always @ (posedge(clk), posedge(rst))
begin
    if (rst == 1'b1) begin
        count <= 32'b0;
        clk_div <= 1'b0;
        end
    else if (count == count_to - 1) begin
        count <= 32'b0;     
        clk_div <= ~clk_div;
        end          
    else begin
        count <= count + 1;
        clk_div <= clk_div;
        end
end

//always @ (posedge(clk), posedge(rst))
//begin
//    if (rst == 1'b1)
//        count <= 32'b0;
//    else if (count == count_to - 1)
//        count <= 32'b0;               
//    else
//        count <= count + 1;
//end

//always @ (posedge(clk), posedge(rst))
//begin
//    if (rst == 1'b1)
//        clk_div <= 1'b0;
//    else if (count == count_to - 1)
//        clk_div <= ~clk_div;
//    else
//        clk_div <= clk_div;
//end

endmodule

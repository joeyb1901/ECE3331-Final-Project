module MorseCode(
        input clk, 
        input Msig,
        output reg [15:5] led,
        output reg [1:0] command
    );
    
localparam [8:0] R = 9'b000101101; 
localparam [8:0] S = 9'b000010101; 
localparam [8:0] G = 9'b001101101; 
localparam [8:0] P = 9'b101101101; 

reg [8:0] morse_code = 9'b000000000;
reg reset = 0;
reg [31:0] scale = 32'd10000000;
wire new_clk;

clk_div divider( clk, reset, scale, new_clk); 

always @ (posedge new_clk) begin
    morse_code[0] = Msig;
    morse_code [8:0] <= morse_code << 1;
    if ((morse_code == (R)) & (command[1])) begin
     command[0] = 1'b1;
    end
    else if (morse_code == (S)) begin
     command = 2'b01;
    end
    else if (((morse_code) == (G)) & (~command[1])) begin // from stopped
     command = 2'b11;
    end
    else if (((morse_code) == (G)) & (~command[0])) begin // when paused...
     command <= command; // ... go does nothing
    end 
    else if ((morse_code == (P)) & (command == 2'b11)) begin
     command[0] = 1'b0;
    end
    led[6:5] <= command [1:0];
    led[15:7] <= morse_code [8:0];
end                                

endmodule

module clk_div(
	input clk,
	input reset,
	input [31:0] scale ,
	output reg clk_out = 0
    );

	// f = (100 MHz)/(4*scale)
     // scale = 1000 --> f = 25 kHz
	reg [31:0] count = 32'b0;
	always @(posedge clk)
          if (reset) begin
               count <= 32'b0;
               clk_out <= 1'b0;
          end else if (count == scale - 1) begin
               count <= 32'b0;
               clk_out <= ~clk_out;
          end else begin
               count <= count + 1;
               clk_out <= clk_out;
          end

endmodule

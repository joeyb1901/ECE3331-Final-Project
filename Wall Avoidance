module Wall_Avoidance(
            input clk,
            input [1:0] command,
            input [1:0] color,
            input left_wall,
            input right_wall,
            output reg [2:0] move,
            output reg [20:0] widthA,
            output reg [20:0] widthB
            );

 reg [2:0] wall_state = 0;
 reg turn_order = 0; // left left right right to move across the field by column
 reg wall;
 reg field_end = 0;

 reg turn_rst = 1; // used by the clock during turns (0 lets the clock run, 1 doesn't)
 reg turn_pause = 0; // used by pause command
 localparam [31:0] turning_time = 32'd162000000; // time is takes for the rover to turn 90 degrees
 wire turn_delay; // variable is icremented every [turning_time] milliseconds

ClkDivider turn_timer(  .clk(clk), 
                        .rst(turn_rst), 
                        .pause(turn_pause),
                        .count_to(turning_time), 
                        .clk_div(turn_delay)); 
                      
 reg width_rst = 1; // used by the clock during turns (0 lets the clock run, 1 doesn't)
 reg width_pause = 0; // used by pause command
 localparam [31:0] width_time = 32'd100000000; // time is takes for the rover to move one column over
 wire width_delay; // variable is icremented every [width_time] milliseconds

ClkDivider width_timer( .clk(clk), 
                        .rst(width_rst), 
                        .pause(width_pause),
                        .count_to(width_time), 
                        .clk_div(width_delay)); 
                       
 reg backup_rst = 1; // used by the clock during turns (0 lets the clock run, 1 doesn't)
 reg backup_pause = 0; // used by pause command
 localparam [31:0] backup_time = 32'd35000000; // time is takes for the rover to move one column over
 wire backup_delay; // variable is icremented every [width_time] milliseconds

ClkDivider backup_timer( .clk(clk), 
                        .rst(backup_rst), 
                        .pause(backup_pause),
                        .count_to(backup_time), 
                        .clk_div(backup_delay)); 

always @(wall_state) begin

    if (~command[1]) begin // STOP COMMAND
        turn_rst = 1;
        width_rst = 1;
        backup_rst = 1;
        turn_pause = 0;
        width_pause = 0;
        backup_pause = 0;
   end
   else if (~command[0]) begin // PAUSE COMMAND
        turn_pause = 1;
        width_pause = 1;
        backup_pause = 1;
        end
   else begin
        turn_pause = 0;
        width_pause = 0;
        backup_pause = 0;
   end

    case(wall_state) 
        3'd0 : begin
            move = 1;
            turn_rst = 1; // stop turn timer from state 3
            width_rst = 1; 
        end
        3'd1 : begin // move forward set distance [width]
            turn_rst = 1; // stop turn timer
            width_rst = 1; // stop width timer
            backup_rst = 0; // start backup timer
            move = 4;
        end
        3'd2 : begin // wall initially found - turn
            turn_rst = 0; // start turn timer
            width_rst = 1;
            case (turn_order)
                1'b0 : begin // left turn
                    move = 3;
                end
                1'b1 : begin // right turn
                    move = 2;
                end
            endcase         
        end
        3'd3 : begin // move forward set distance [width]
            turn_rst = 1; // stop turn timer
            width_rst = 0; // start width timer
            move = 5;
        end
        3'd4 : begin // second turn
            width_rst = 1; // stop width timer
            turn_rst = 0; // start turn timer
            case (turn_order)
                1'b0 : begin // left turn
                    move = 3;
                end
                1'b1 : begin // right turn
                    move = 2;
                end
            endcase  
        end
    endcase
    
end

always @(posedge clk) begin

        wall = (left_wall & right_wall); // Wall is only HIGH when both sensors detect it
    if ((command == 2'b11) & (color == 2'b00)) begin
       widthA = 21'd1083332; // (left motor) PWM changes when turning
       widthB = 21'd1000000; // (right motor) 
       case(wall_state) 
            3'd0 : if (wall) wall_state = 3'd1;
            3'd1 : if (backup_delay) wall_state = 3'd2;
            3'd2 : if (turn_delay) wall_state = 3'd3;
            3'd3 : begin
                if (width_delay & wall) begin
                    field_end = 1; // skips a turn when at a corner
                    wall_state = 3'd4;
                end
                else if (width_delay) wall_state = 3'd4;
            end
            3'd4 : begin
                if (turn_delay) begin
                    wall_state = 3'd0;
                    turn_order = turn_order + 1;
                    if (field_end) begin
                        turn_order = turn_order + 1; // cancels direction change
                        field_end = 0;
                    end
                end    
            end
        endcase
    end
    else if ((~command[0]) & (color == 2'b00)) wall_state <= wall_state;
    else if (color == 2'b00) wall_state = 3'd0;
    else begin
        widthA = 21'd812500; // (left motor) PWM changes when turning
        widthB = 21'd750000; // (right motor) 
    end
end

endmodule
